version: '3.8'

services:
  traefik:
    image: traefik:${VERSION_TRAEFIK}
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - traefik-public
    ports:
      - "80:80"
      - "443:443"
      - "8448:8448"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config:/etc/traefik:ro
      - ${APPDATA_PATH}/proxy/certs:/letsencrypt
    # The environment section is used here ONLY for the DNS challenge API key.
    environment:
      - CF_API_TOKEN=${CF_API_TOKEN}
    # The command section is used to build the dynamic parts of the configuration
    # using variables from the .env file. This is the correct and robust method.
    command:
      # --- Entrypoints ---
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--entrypoints.matrix.address=:8448"
      # --- Providers ---
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik"
      - "--providers.file.watch=true"
      # --- API & Logging ---
      - "--api.dashboard=true"
      - "--log.level=INFO"
      # --- Certificate Resolver ---
      - "--certificatesresolvers.cloudflare.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      # --- Global HTTP to HTTPS Redirect ---
      - "--entrypoints.http.http.redirections.entrypoint.to=https"
      - "--entrypoints.http.http.redirections.entrypoint.scheme=https"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=true"
      # --- Traefik Dashboard ---
      - "traefik.http.routers.traefik-dashboard.rule=Host(`${SUBDOMAIN_TRAEFIK}.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-dashboard.middlewares=authentik@docker"
      # --- Authentik Forward Auth Middleware Definition ---
      - "traefik.http.middlewares.authentik.forwardauth.address=http://authentik-proxy:9000/outpost.goauthentik.io/auth/traefik"
      - "traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid"

  cloudflare-ddns:
    image: favonia/cloudflare-ddns:${VERSION_CLOUDFLARE_DDNS}
    container_name: cloudflare-ddns
    restart: unless-stopped
    user: "1000:1000"
    read_only: true
    cap_drop: [all]
    security_opt: ["no-new-privileges:true"]
    environment:
      - CLOUDFLARE_API_TOKEN=${CF_API_TOKEN}
      - ZONE=${DOMAIN}
      - SUBDOMAINS="${SUBDOMAIN_TRAEFIK},${SUBDOMAIN_AUTH},${SUBDOMAIN_GRAFANA},${SUBDOMAIN_STATUS},${SUBDOMAIN_GITEA},${SUBDOMAIN_WOODPECKER},${SUBDOMAIN_TAIGA},${SUBDOMAIN_MATRIX},${SUBDOMAIN_HOMEPAGE}"
      - UPDATE_CRON=*/5 * * * *
      - PROXIED=true
      - TTL=1
      - TZ=${TZ}

networks:
  traefik-public:
    external: true
