version: '3.8'

services:
  postgres-collab:
    image: postgres:${POSTGRES_VERSION}
    container_name: collaboration-postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB_SYNAPSE}
      - POSTGRES_USER=${POSTGRES_USER_SYNAPSE}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_SYNAPSE}
      - POSTGRES_INITDB_ARGS=--encoding='UTF8' --lc-collate='C' --lc-ctype='C'
    networks:
      - backend_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_SYNAPSE} -d ${POSTGRES_DB_SYNAPSE}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  synapse-init:
    image: matrixdotorg/synapse:${SYNAPSE_VERSION}
    container_name: collaboration-synapse-init
    volumes:
      - ${DATA_BASE_PATH}/collaboration/synapse:/data
    environment:
      - SYNAPSE_SERVER_NAME=${SYNAPSE_SERVER_NAME}
      - SYNAPSE_REPORT_STATS=${SYNAPSE_REPORT_STATS}
      - POSTGRES_DB_SYNAPSE=${POSTGRES_DB_SYNAPSE}
      - POSTGRES_USER_SYNAPSE=${POSTGRES_USER_SYNAPSE}
      - POSTGRES_PASSWORD_SYNAPSE=${POSTGRES_PASSWORD_SYNAPSE}
      - PUID=${PUID}
      - PGID=${PGID}
    entrypoint: /bin/sh
    command: >
      sh -c "
        if [ ! -f /data/homeserver.yaml ]; then
          echo 'Config not found. Generating new config...';

          # STEP 1: Actually generate the default config file. This was missing.
          /start.py generate;

          echo 'Config generated. Modifying for PostgreSQL...';

          # STEP 2: Now that the file exists, modify it with sed.
          sed -i -e '/^database:/,/\/data\/homeserver.db/c\
      database:\n\
        name: psycopg2\n\
        args:\n\
          user: ${POSTGRES_USER_SYNAPSE}\n\
          password: ${POSTGRES_PASSWORD_SYNAPSE}\n\
          database: ${POSTGRES_DB_SYNAPSE}\n\
          host: postgres-collab\n\
          port: 5432\n\
          cp_min: 5\n\
          cp_max: 10
      ' /data/homeserver.yaml;

          echo 'Database configured. Setting file permissions...';

          # STEP 3: Ensure the generated files are owned by the correct user.
          chown -R ${PUID}:${PGID} /data;

        else
          echo 'Config already exists. Skipping generation.';
        fi
      "

  synapse:
    image: matrixdotorg/synapse:${SYNAPSE_VERSION}
    container_name: collaboration-synapse
    restart: unless-stopped
    depends_on:
      postgres-collab:
        condition: service_healthy
      synapse-init:
        condition: service_completed_successfully
    volumes:
      - ${DATA_BASE_PATH}/collaboration/synapse:/data
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    networks:
      - traefik_net
      - backend_net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"
      - "traefik.http.routers.matrix-cs.rule=Host(`${MATRIX_SUBDOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.matrix-cs.entrypoints=websecure"
      - "traefik.http.services.matrix-cs.loadbalancer.server.port=8008"
      - "traefik.tcp.routers.matrix-ss.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.matrix-ss.entrypoints=matrix"
      - "traefik.tcp.routers.matrix-ss.service=matrix-ss-svc"
      - "traefik.tcp.routers.matrix-ss.tls.passthrough=true"
      - "traefik.tcp.services.matrix-ss-svc.loadbalancer.server.port=8448"
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  element-web:
    image: vectorim/element-web:${ELEMENT_VERSION}
    container_name: collaboration-element
    restart: unless-stopped
    volumes:
      - ./config/element-config.json:/app/config.json:ro
    networks:
      - traefik_net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"
      - "traefik.http.routers.element.rule=Host(`${ELEMENT_SUBDOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.element.entrypoints=websecure"
      - "traefik.http.routers.element.tls.certresolver=cloudflare"
      - "traefik.http.services.element.loadbalancer.server.port=80"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  matrix-hookshot:
    image: halfshot/matrix-hookshot:${HOOKSHOT_VERSION}
    container_name: collaboration-hookshot
    restart: unless-stopped
    depends_on: [synapse]
    volumes:
      - ${DATA_BASE_PATH}/collaboration/hookshot:/data
    networks:
      - traefik_net
      - backend_net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"
      - "traefik.http.routers.hookshot.rule=Host(`${HOOKSHOT_SUBDOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.hookshot.entrypoints=websecure"
      - "traefik.http.routers.hookshot.tls.certresolver=cloudflare"
      - "traefik.http.services.hookshot.loadbalancer.server.port=8080"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  traefik_net:
    external: true
  backend_net:
    external: true

volumes:
  postgres_data:
    driver_opts:
      type: none
      o: bind
      device: ${DATA_BASE_PATH}/collaboration/postgres
