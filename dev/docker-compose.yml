---
version: '3.8'

services:
  database:
    image: postgres:${VERSION_POSTGRES}
    container_name: gitea-db
    restart: unless-stopped
    networks:
      - shared-internal-net
    volumes:
      - ${APPDATA_PATH}/dev/gitea-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${GITEA_DB_PASS}
      - POSTGRES_DB=gitea
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d gitea -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  gitea:
    image: gitea/gitea:${VERSION_GITEA}
    container_name: gitea
    user: "1000:1000" # Run as non-root
    restart: unless-stopped
    networks:
      - shared-internal-net
      - traefik-public
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ${APPDATA_PATH}/dev/gitea_data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=database:5432
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=${POSTGRES_USER}
      - GITEA__database__PASSWD=${GITEA_DB_PASS}
      - GITEA__server__ROOT_URL=https://${SUBDOMAIN_GITEA}.${DOMAIN}
      # Further OIDC configuration will be done in Gitea's app.ini after first run
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitea.rule=Host(`${SUBDOMAIN_GITEA}.${DOMAIN}`)"
      - "traefik.http.routers.gitea.tls=true"
      - "traefik.http.routers.gitea.tls.certresolver=cloudflare"
      - "traefik.http.services.gitea.loadbalancer.server.port=3000"
      # Gitea has its own OIDC integration, so it's not protected by forward auth

  woodpecker-server:
    image: woodpeckerci/woodpecker-server:${VERSION_WOODPECKER_SERVER}
    container_name: woodpecker-server
    restart: unless-stopped
    networks:
      - shared-internal-net
      - traefik-public
    volumes:
      - ${APPDATA_PATH}/dev/woodpecker_data:/var/lib/woodpecker/
    environment:
      - WOODPECKER_HOST=https://${SUBDOMAIN_WOODPECKER}.${DOMAIN}
      - WOODPECKER_GITEA=true
      - WOODPECKER_GITEA_URL=https://${SUBDOMAIN_GITEA}.${DOMAIN}
      - WOODPECKER_GITEA_CLIENT=${WOODPECKER_GITEA_CLIENT_ID}
      - WOODPECKER_GITEA_SECRET=${WOODPECKER_GITEA_CLIENT_SECRET}
      - WOODPECKER_AGENT_SECRET=${WOODPECKER_AGENT_SECRET}
      - WOODPECKER_ADMIN=${WOODPECKER_ADMIN_USER}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.woodpecker.rule=Host(`${SUBDOMAIN_WOODPECKER}.${DOMAIN}`)"
      - "traefik.http.routers.woodpecker.tls=true"
      - "traefik.http.routers.woodpecker.tls.certresolver=cloudflare"
      - "traefik.http.services.woodpecker.loadbalancer.server.port=8000"
      # Woodpecker's login is handled via Gitea's OAuth, so we protect it with forward auth
      # to ensure only valid users can even see the login page.
      - "traefik.http.routers.woodpecker.middlewares=authentik@docker"

  woodpecker-agent:
    image: woodpeckerci/woodpecker-agent:${VERSION_WOODPECKER_AGENT}
    container_name: woodpecker-agent
    restart: unless-stopped
    networks:
      - shared-internal-net # Internal only
    depends_on:
      woodpecker-server:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WOODPECKER_SERVER=woodpecker-server:9000
      - WOODPECKER_AGENT_SECRET=${WOODPECKER_AGENT_SECRET}
      - WOODPECKER_MAX_WORKFLOWS=4
    deploy:
      resources:
        limits:
          # Tune based on expected build loads
          cpus: '2.0'
          memory: 4G

networks:
  traefik-public:
    external: true
  shared-internal-net:
    external: true
