version: '3.8'

services:
  database:
    image: postgres:${VERSION_POSTGRES}
    container_name: authentik-db
    restart: unless-stopped
    networks:
      - shared-internal-net # Internal only
    volumes:
      - ${APPDATA_PATH}/iam/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${AUTHENTIK_DB_PASS}
      - POSTGRES_DB=authentik
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d authentik -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G

  redis:
    image: redis:${VERSION_REDIS}
    container_name: authentik-redis
    restart: unless-stopped
    networks:
      - shared-internal-net # Internal only
    volumes:
      - ${APPDATA_PATH}/iam/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M

  server:
    image: ghcr.io/goauthentik/server:${VERSION_AUTHENTIK}
    container_name: authentik-server
    restart: unless-stopped
    networks:
      - shared-internal-net # Internal only
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ${APPDATA_PATH}/iam/media:/media
      - ${APPDATA_PATH}/iam/templates:/templates
    environment:
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=database
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER}
      - AUTHENTIK_POSTGRESQL__NAME=authentik
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_DB_PASS}
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
    command: server

  worker:
    image: ghcr.io/goauthentik/server:${VERSION_AUTHENTIK}
    container_name: authentik-worker
    restart: unless-stopped
    networks:
      - shared-internal-net # Internal only
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ${APPDATA_PATH}/iam/media:/media
      - ${APPDATA_PATH}/iam/templates:/templates
    environment:
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=database
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER}
      - AUTHENTIK_POSTGRESQL__NAME=authentik
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_DB_PASS}
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
    command: worker

  proxy:
    image: ghcr.io/goauthentik/proxy:${VERSION_AUTHENTIK}
    container_name: authentik-proxy
    restart: unless-stopped
    networks:
      - shared-internal-net
      - traefik-public # Exposed to Traefik
    environment:
      # !!! IMPORTANT !!!
      # The AUTHENTIK_TOKEN must be obtained from the Authentik UI after creating the outpost.
      # This is a manual step that must be performed after the initial deployment.
      - AUTHENTIK_HOST=http://authentik-server:9000
      - AUTHENTIK_TOKEN=${AUTHENTIK_OUTPOST_TOKEN}
      - AUTHENTIK_INSECURE=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.rule=Host(`${SUBDOMAIN_AUTH}.${DOMAIN}`)"
      - "traefik.http.routers.authentik.tls=true"
      - "traefik.http.routers.authentik.tls.certresolver=cloudflare"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"

networks:
  traefik-public:
    external: true
  shared-internal-net:
    external: true