version: '3.8'

services:
  postgres-iam:
    image: postgres:${POSTGRES_VERSION}
    container_name: iam-postgres
    restart: unless-stopped
    volumes:
      - ${DATA_BASE_PATH}/iam/postgres:/var/lib/postgresql/data
    environment:
      # These variables are used by the postgres image to initialize the database
      - POSTGRES_DB=${KEYCLOAK_DATABASE_NAME}
      - POSTGRES_USER=${KEYCLOAK_DATABASE_USER}
      - POSTGRES_PASSWORD=${KEYCLOAK_DATABASE_PASSWORD}
    networks:
      - backend_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KEYCLOAK_DATABASE_USER} -d ${KEYCLOAK_DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION}
    container_name: iam-keycloak
    restart: unless-stopped
    command: ["start"] # ocis import is now handled by the script
    entrypoint: ["/bin/sh", "/opt/keycloak/bin/docker-entrypoint-override.sh"]
    depends_on:
      postgres-iam:
        condition: service_healthy
    volumes:
      - ./config/keycloak/docker-entrypoint-override.sh:/opt/keycloak/bin/docker-entrypoint-override.sh
      - ./config/keycloak/ocis-realm.dist.json:/opt/keycloak/data/import/ocis-realm.json
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KEYCLOAK_ADMIN_USER}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      # --- Database Connection (Corrected for modern Keycloak) ---
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://iam-postgres:5432/${KEYCLOAK_DATABASE_NAME}
      - KC_DB_USERNAME=${KEYCLOAK_DATABASE_USER}
      - KC_DB_PASSWORD=${KEYCLOAK_DATABASE_PASSWORD}
      # --- Proxy and Hostname Configuration ---
      - KC_HOSTNAME=auth.${DOMAIN_NAME}
      - KC_PROXY_HEADERS=xforwarded
      - KC_HEALTH_ENABLED=true
      - KC_HTTP_ENABLED=true
      - KC_CACHE=local
      - OCIS_URL=https://${OCIS_SUBDOMAIN}.${DOMAIN_NAME}
    networks:
      - traefik_net
      - backend_net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"
      - "traefik.http.routers.keycloak.rule=Host(`auth.${DOMAIN_NAME}`)"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.routers.keycloak.service=keycloak-svc"
      - "traefik.http.services.keycloak-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.keycloak.tls.certresolver=cloudflare"
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { java.net.URI uri = java.net.URI.create(args[0]); System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)uri.toURL().openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live']
      interval: 15s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  traefik_net:
    external: true
  backend_net:
    external: true
