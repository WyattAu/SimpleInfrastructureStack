---
version: '3.8'

services:
  postgres-forgejo:
    image: postgres:${POSTGRES_FORGEJO_VERSION}
    container_name: operations-postgres-forgejo
    restart: unless-stopped
    volumes:
      - ${DATA_BASE_PATH}/operations/postgres-forgejo:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB_FORGEJO}
      - POSTGRES_USER=${POSTGRES_USER_FORGEJO}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_FORGEJO}
    networks:
      - backend_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_FORGEJO} -d ${POSTGRES_DB_FORGEJO}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  forgejo:
    image: code.forgejo.org/forgejo/forgejo:${FORGEJO_VERSION}
    container_name: operations-forgejo
    restart: unless-stopped
    depends_on:
      postgres-forgejo:
        condition: service_healthy
    volumes:
      - ${DATA_BASE_PATH}/operations/forgejo:/data
    # user: "${PUID}:${PGID}"
    environment:
      # --- System Settings ---
      - USER=git
      # official documentation prefer USER_UID and USER_GID https://forgejo.org/docs/v1.21/admin/installation-docker/
      - USER_UID=${PUID}
      - USER_GID=${PGID}
      #- PUID=${PUID}
      #- PGID=${PGID}
      - TZ=${TZ}

      # --- Database Settings ---
      - FORGEJO__database__DB_TYPE=postgres
      - FORGEJO__database__HOST=operations-postgres-forgejo:5432
      - FORGEJO__database__NAME=${POSTGRES_DB_FORGEJO}
      - FORGEJO__database__USER=${POSTGRES_USER_FORGEJO}
      - FORGEJO__database__PASSWD=${POSTGRES_PASSWORD_FORGEJO}

      # --- Server Settings ---
      - FORGEJO__server__DOMAIN=${FORGEJO_SUBDOMAIN}.${DOMAIN_NAME}
      - FORGEJO__server__ROOT_URL=https://${FORGEJO_SUBDOMAIN}.${DOMAIN_NAME}

      # --- Native OIDC Authentication Settings ---
      - FORGEJO__oauth2_client__ENABLED=true
      - FORGEJO__oauth2_client__PROVIDERS=keycloak
      - FORGEJO__oauth2_client__keycloak__PROVIDER=openidConnect
      - FORGEJO__oauth2_client__keycloak__CLIENT_ID=forgejo
      - FORGEJO__oauth2_client__keycloak__CLIENT_SECRET=${FORGEJO_OIDC_CLIENT_SECRET}
      - FORGEJO__oauth2_client__keycloak__AUTO_DISCOVER_URL=https://auth.${DOMAIN_NAME}/realms/company-realm/.well-known/openid-configuration

      # --- UI/Service Settings ---
      #- FORGEJO__service__DISABLE_REGISTRATION=false
      - FORGEJO__service__SHOW_REGISTRATION_BUTTON=false

      # --- Other Settings ---
      - FORGEJO__actions__ENABLED=true
      - FORGEJO__container__ENABLE=true
      - FORGEJO__container__REGISTRY_HOST=${REGISTRY_SUBDOMAIN}.${DOMAIN_NAME}
    #- FORGEJO__metrics__ENABLED=true
    networks:
      - traefik_net
      - backend_net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"

      # --- 1. DEFINE A SINGLE SERVICE for the Forgejo container ---
      - "traefik.http.services.forgejo-svc.loadbalancer.server.port=3000"

      # --- 2. CONFIGURE THE ROUTER for the Forgejo Web UI ---
      - "traefik.http.routers.forgejo-web.rule=Host(`${FORGEJO_SUBDOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.forgejo-web.entrypoints=websecure"
      - "traefik.http.routers.forgejo-web.tls.certresolver=cloudflare"
      #- "traefik.http.routers.forgejo-web.middlewares=keycloak-auth"
      - "traefik.http.routers.forgejo-web.service=forgejo-svc"

      # --- 3. CONFIGURE THE ROUTER for the Forgejo Container Registry ---
      - "traefik.http.routers.forgejo-registry.rule=Host(`${REGISTRY_SUBDOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.forgejo-registry.entrypoints=websecure"
      - "traefik.http.routers.forgejo-registry.tls.certresolver=cloudflare"
      - "traefik.http.routers.forgejo-registry.service=forgejo-svc"
    healthcheck:
      #test: ["CMD-SHELL", "su-exec git /usr/local/bin/forgejo doctor check-database"]
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1"]
      interval: 60s
      timeout: 15s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.25'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  forgejo-runner-permissions:
    image: busybox:latest
    container_name: operations-forgejo-runner-permissions
    # This init container runs as root to forcefully set permissions.
    command: chown -R 1000:1000 /data
    volumes:
      - ${DATA_BASE_PATH}/operations/forgejo-runner:/data
    environment:
      # These must be set in your Portainer Stack environment variables
      - PUID=1000 # The UID of your 'apps' user
      - PGID=1000 # The GID of your 'apps' user
    # This service runs, fixes permissions, and exits.
    restart: "no"

  forgejo-runner-setup:
    image: code.forgejo.org/forgejo/runner:${FORGEJO_RUNNER_VERSION}
    container_name: operations-forgejo-runner-setup
    # This service depends on the permissions being fixed first.
    depends_on:
      forgejo-runner-permissions:
        condition: service_completed_successfully
    # It runs as the specified low-privilege user.
    #user: "${PUID}:${PGID}"
    command:
      - "sh"
      - "-c"
      - |
        set -ex

        echo "--- STARTING DEFINITIVE DEBUG SCRIPT ---"

        echo "STEP 1: VERIFYING IDENTITY AND PERMISSIONS"
        echo "Running as user:"
        id
        echo "--------------------"
        echo "Initial permissions of /data directory from inside container:"
        ls -la /data
        echo "--------------------"

        echo "STEP 2: ATTEMPTING TO WRITE A TEST FILE"
        echo "This is a test file to check write permissions." > /data/test-write-permission.txt
        echo "Write test successful. Verifying file ownership:"
        ls -la /data
        echo "--------------------"

        echo "STEP 3: ATTEMPTING TO REGISTER RUNNER"
        forgejo-runner register --no-interactive \
          --instance "${FORGEJO_INSTANCE_URL}" \
          --token "${FORGEJO_RUNNER_TOKEN}" \
          --name "${FORGEJO_RUNNER_NAME}" \
          --labels "${FORGEJO_RUNNER_LABELS}"
        echo "Registration command finished. Verifying .runner file:"
        ls -la /data
        echo "--------------------"

        echo "STEP 4: ATTEMPTING TO GENERATE CONFIG"
        forgejo-runner generate-config > /data/config.yaml
        echo "Config generation finished. Verifying config.yaml:"
        ls -la /data
        echo "--------------------"

        echo "--- DEBUG SCRIPT COMPLETED SUCCESSFULLY ---"
    volumes:
      - ${DATA_BASE_PATH}/operations/forgejo-runner:/data
    environment:
      - PUID=1000
      - PGID=1000
      - FORGEJO_INSTANCE_URL=https://${FORGEJO_SUBDOMAIN}.${DOMAIN_NAME}
      - FORGEJO_RUNNER_TOKEN=${FORGEJO_RUNNER_TOKEN}
      - FORGEJO_RUNNER_NAME=docker-runner
      - FORGEJO_RUNNER_LABELS=docker:docker://node:20-bookworm
    networks:
      - traefik_net
      - backend_net
    restart: "no"

  forgejo-runner:
    image: code.forgejo.org/forgejo/runner:${FORGEJO_RUNNER_VERSION}
    container_name: operations-forgejo-runner
    restart: unless-stopped
    depends_on:
      forgejo-runner-setup:
        condition: service_completed_successfully
      forgejo:
        condition: service_healthy
    user: "${PUID}:${PGID}"
    command:
      - "forgejo-runner"
      - "--config"
      - "/data/config.yaml"
      - "daemon"
    volumes:
      - ${DATA_BASE_PATH}/operations/forgejo-runner:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres-woodpecker:
    image: postgres:${POSTGRES_FORGEJO_VERSION} # You can use the same version
    container_name: operations-postgres-woodpecker
    restart: unless-stopped
    volumes:
      # Use a separate directory for Woodpecker's data
      - ${DATA_BASE_PATH}/operations/postgres-woodpecker:/var/lib/postgresql/data
    environment:
      # Use the new environment variables
      - POSTGRES_DB=${POSTGRES_DB_WOODPECKER}
      - POSTGRES_USER=${POSTGRES_USER_WOODPECKER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_WOODPECKER}
    networks:
      - backend_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_WOODPECKER} -d ${POSTGRES_DB_WOODPECKER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  woodpecker-server:
    image: woodpeckerci/woodpecker-server:${WOODPECKER_SERVER_VERSION}
    container_name: operations-woodpecker-server
    restart: unless-stopped
    depends_on:
      forgejo:
        condition: service_healthy
      postgres-woodpecker:
        condition: service_healthy
    volumes:
      - ${DATA_BASE_PATH}/operations/woodpecker:/var/lib/woodpecker/
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WOODPECKER_HOST=https://${WOODPECKER_SUBDOMAIN}.${DOMAIN_NAME}
      - WOODPECKER_GRPC_ADDR=:${WOODPECKER_SERVER_GRPC_PORT:-9000} # Listen on all interfaces
      - WOODPECKER_GRPC_SECRET=${WOODPECKER_AGENT_SECRET}
      - WOODPECKER_ADMINS=${WOODPECKER_ADMIN}
      - WOODPECKER_OPEN=true
      - WOODPECKER_ORGS=${WOODPECKER_ORGS}
      - WOODPECKER_AGENT_SECRET=${WOODPECKER_AGENT_SECRET}
      - WOODPECKER_FORGEJO=true
      # DB
      - WOODPECKER_DATABASE_DRIVER=postgres
      - WOODPECKER_DATABASE_DATASOURCE=postgres://${POSTGRES_USER_WOODPECKER}:${POSTGRES_PASSWORD_WOODPECKER}@postgres-woodpecker:5432/${POSTGRES_DB_WOODPECKER}?sslmode=disable
      # Use the full, public-facing URL for Forgejo
      - WOODPECKER_FORGEJO_URL=https://${FORGEJO_SUBDOMAIN}.${DOMAIN_NAME}
      - WOODPECKER_FORGEJO_CLIENT=${WOODPECKER_FORGEJO_CLIENT}
      - WOODPECKER_FORGEJO_SECRET=${WOODPECKER_FORGEJO_SECRET}
      - WOODPECKER_BACKEND_DOCKER_NETWORK=backend
    networks:
      - traefik_net
      - backend_net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"
      #- "traefik.http.routers.woodpecker.rule=Host(`${WOODPECKER_SUBDOMAIN}.${DOMAIN_NAME}`)"
      #- "traefik.http.routers.woodpecker.entrypoints=websecure"
      #- "traefik.http.routers.woodpecker.tls.certresolver=cloudflare"
      #- "traefik.http.services.woodpecker-svc.loadbalancer.server.port=8000"
      #- "traefik.http.routers.woodpecker.service=woodpecker-svc"

      - "traefik.http.services.woodpecker-web.loadbalancer.server.port=8000"
      - "traefik.http.services.woodpecker-grpc.loadbalancer.server.port=9000"
      - "traefik.http.services.woodpecker-grpc.loadbalancer.server.scheme=h2c"

      # --- 2. CONFIGURE ROUTER for the Web UI ---
      - "traefik.http.routers.woodpecker-web.rule=Host(`${WOODPECKER_SUBDOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.woodpecker-web.entrypoints=websecure"
      - "traefik.http.routers.woodpecker-web.tls.certresolver=cloudflare"
      - "traefik.http.routers.woodpecker-web.service=woodpecker-web"

      # --- 3. CONFIGURE ROUTER for the gRPC endpoint ---
      - "traefik.http.routers.woodpecker-grpc.rule=Host(`${WOODPECKER_GRPC_SUBDOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.woodpecker-grpc.entrypoints=websecure"
      - "traefik.http.routers.woodpecker-grpc.tls.certresolver=cloudflare"
      - "traefik.http.routers.woodpecker-grpc.service=woodpecker-grpc"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  woodpecker-agent:
    image: woodpeckerci/woodpecker-agent:${WOODPECKER_AGENT_VERSION}
    container_name: operations-woodpecker-agent
    restart: unless-stopped
    depends_on:
      - woodpecker-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    dns:
      - 1.1.1.1
      - 8.8.8.8
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WOODPECKER_SERVER=woodpecker-server:9000
      #- WOODPECKER_SERVER=${WOODPECKER_GRPC_SUBDOMAIN}.${DOMAIN_NAME}:443
      - WOODPECKER_AGENT_SECRET=${WOODPECKER_AGENT_SECRET}
      - WOODPECKER_BACKEND=docker
      - WOODPECKER_MAX_WORKFLOWS=2
      - WOODPECKER_BACKEND_DOCKER_PRIVILEGED_IMAGES=${WOODPECKER_DOCKER_PRIVILEGED_IMAGES}
    networks:
      #- traefik_net
      - backend_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  traefik_net:
    external: true
  backend_net:
    external: true
